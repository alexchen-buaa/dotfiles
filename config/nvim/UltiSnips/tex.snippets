# some of these comes from Gilles Castel

global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal


# symbol formatting

snippet bf "Boldface" i
\textbf{$1}$0
endsnippet

snippet ms "Mathscr Character" i
\mathscr{$1}$0
endsnippet

snippet mbb "Mathbb Character" i
\mathbb{$1}$0
endsnippet

snippet mc "Mathcal Character" i
\mathcal{$1}$0
endsnippet


# layout

snippet bskip "Bigskip" i
\bigskip
endsnippet

snippet nid "Same-line Noindent" i
\noindent$0
endsnippet


# sub/superscripting (with automation)

snippet sp "Superscript" i
^{$1}$0
endsnippet

snippet su "Subscript" i
_{$1}$0
endsnippet

# for word followed by a single digit
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# for word followed by two consecutive digits
context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

# might be a little bit inappropriate, please test it
context "math()"
snippet cp "complement" iA
^{c}
endsnippet


# special symbols

snippet vee "Vee" i
\vee
endsnippet

snippet wee "Wedge" i
\wedge
endsnippet

snippet ra "Rightarrow" i
\rightarrow
endsnippet

snippet la "Leftarrow" i
\leftarrow
endsnippet

snippet lr "Leftrightarrow" i
\leftrightarrow
endsnippet

snippet sim "Sim" i
\sim
endsnippet

context "math()"
snippet cap "Cap / Intersection" i
\cap
endsnippet

context "math()"
snippet cup "Cup / Union" i
\cup
endsnippet

context "math()"
snippet an "And Sign / Separation" w
&
endsnippet

snippet bhh "Real Backslash" i
\backslash
endsnippet

snippet bh "Backslash" i
\
endsnippet

snippet fa "For all" i
\forall
endsnippet

snippet pr "Prime" i
\prime
endsnippet

snippet inn "Contained In" i
\in
endsnippet

snippet lim "Limit" i
\lim_{$1}$0
endsnippet

snippet sup "Supremum" i
\sup_{$1}$0
endsnippet

snippet inf "Infimum" i
\inf_{$1}$0
endsnippet

snippet abs "Absolute value" i
\left\vert$1\right\vert$0
endsnippet

snippet el "End of Line" i
\\\\
endsnippet

snippet st "Such that" i
\ s.t.\ 
endsnippet

snippet qed "QED symbol" i
\qedsymbol
endsnippet

snippet norm "Norm" i
\left\Vert$1\right\Vert
endsnippet

snippet pa "Partial Derivative" i
\frac{\partial $1}{\partial $2} $0
endsnippet


# envs and math mode

snippet dol "Double Dollar / Formula" i
$$1$$0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

snippet bhb "Backslash with Brackets" i
\\$1{$2}$0
endsnippet

snippet bk "Big Round Brackets" i
\left($1\right)$0
endsnippet

snippet rk "Round Brackets" i
($1)$0
endsnippet

snippet sk "Square Brackets" i
[$1]$0
endsnippet

snippet ck "Curly Braces" i
\\{$1\\}$0
endsnippet


# fractions

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


# postfix

context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet


# deprecated
# these are usually task-related

#snippet ntg "Notag" i
#\notag
#endsnippet

#snippet prob "Problem" i
#\noindent\textbf{$1}.
#$0
#endsnippet

#snippet subp "Subproblem" i
#\textbf{($1)}.
#$0
#endsnippet

#snippet pred "Predicate" i
#$1_{$2}^{$3}$0
#endsnippet


#snippet vd "vdash" i
#\vdash_{$1}$0
#endsnippet

#snippet thm "Theorem" i
#\begin{theorem}
#$1
#\end{theorem}$0
#endsnippet

#snippet kk "Real Curly Brackets" i
#{$1}$0
#endsnippet
